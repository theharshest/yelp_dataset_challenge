Preprocessing:
  Business:
    tokenization
    lowercase
    removing repeated characters (looovveee -> love)
    expansion of contracted terms (you're -> you are)
    spelling correction
  Checkin
  Review
  Tip:
    tokenization
    lowercase
    removing repeated characters (looovveee -> love)
    expansion of contracted terms (you're -> you are)
    spelling correction
  User

Feature Selection:
  Direct Features:
    Business:
      votes_funny
      votes_useful
      votes_cool
      stars
    Checkin:
    Review:
      n-grams(1-3)
      sentiment_score_of_text(-2, -1, 1, 2)
      length of text (probably?)
    Tip:
      sentiment_score_of_text(-2, -1, 1, 2) * (no. of likes + 1)
    User:
      votes_funny
      votes_useful
      votes_cool
      review_count
      friends_list_length
      compliments(?)
      elite(?)

  Derived Features:
    Number of competitive businesses within x kms of this business
    Number of complementary business within x kms of this business

Things to consider:
1) w1: All reviews should not be equally weighted. User "importance" should be considered as weight to the review he has provided. This would help distinguish fake users from helpful users. Can be done using multiclass classifier, probably something on a scale of 1 to 3. 1 being fake/unhelpful users, 2 being average users and 3 being very helpful users. Use user.json data for this classification of users.
2) w2: This is another weight factor for a review which should be calcluated from the "votes" section of the review, i.e. based on how many votes on "funny", "useful" and "cool" a review is getting.
3) 
